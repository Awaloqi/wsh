/* tslint:disable */
/* eslint-disable */
/**
 * WashMix
 * WashMix REST API
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Delivery,
    DeliveryFromJSON,
    DeliveryToJSON,
    LoginResponse,
    LoginResponseFromJSON,
    LoginResponseToJSON,
    TokenObtainSliding,
    TokenObtainSlidingFromJSON,
    TokenObtainSlidingToJSON,
} from '../models';

export interface DriverAuthLoginCreateRequest {
    data: TokenObtainSliding;
}

export interface DriverDeliveriesCreateRequest {
    data: Delivery;
}

export interface DriverDeliveriesDeleteRequest {
    id: string;
}

export interface DriverDeliveriesPartialUpdateRequest {
    id: string;
    data: Delivery;
}

export interface DriverDeliveriesReadRequest {
    id: string;
}

export interface DriverDeliveriesUpdateRequest {
    id: string;
    data: Delivery;
}

/**
 * 
 */
export class DriverApi extends runtime.BaseAPI {

    /**
     */
    async driverAuthLoginCreateRaw(requestParameters: DriverAuthLoginCreateRequest): Promise<runtime.ApiResponse<LoginResponse>> {
        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling driverAuthLoginCreate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/driver/auth/login/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenObtainSlidingToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResponseFromJSON(jsonValue));
    }

    /**
     */
    async driverAuthLoginCreate(data: TokenObtainSliding): Promise<LoginResponse> {
        const response = await this.driverAuthLoginCreateRaw({ data: data });
        return await response.value();
    }

    /**
     */
    async driverDeliveriesCreateRaw(requestParameters: DriverDeliveriesCreateRequest): Promise<runtime.ApiResponse<Delivery>> {
        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling driverDeliveriesCreate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/driver/deliveries/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeliveryToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DeliveryFromJSON(jsonValue));
    }

    /**
     */
    async driverDeliveriesCreate(data: Delivery): Promise<Delivery> {
        const response = await this.driverDeliveriesCreateRaw({ data: data });
        return await response.value();
    }

    /**
     */
    async driverDeliveriesDeleteRaw(requestParameters: DriverDeliveriesDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling driverDeliveriesDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/driver/deliveries/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async driverDeliveriesDelete(id: string): Promise<void> {
        await this.driverDeliveriesDeleteRaw({ id: id });
    }

    /**
     */
    async driverDeliveriesListRaw(): Promise<runtime.ApiResponse<Array<Delivery>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/driver/deliveries/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DeliveryFromJSON));
    }

    /**
     */
    async driverDeliveriesList(): Promise<Array<Delivery>> {
        const response = await this.driverDeliveriesListRaw();
        return await response.value();
    }

    /**
     */
    async driverDeliveriesPartialUpdateRaw(requestParameters: DriverDeliveriesPartialUpdateRequest): Promise<runtime.ApiResponse<Delivery>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling driverDeliveriesPartialUpdate.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling driverDeliveriesPartialUpdate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/driver/deliveries/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: DeliveryToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DeliveryFromJSON(jsonValue));
    }

    /**
     */
    async driverDeliveriesPartialUpdate(id: string, data: Delivery): Promise<Delivery> {
        const response = await this.driverDeliveriesPartialUpdateRaw({ id: id, data: data });
        return await response.value();
    }

    /**
     */
    async driverDeliveriesReadRaw(requestParameters: DriverDeliveriesReadRequest): Promise<runtime.ApiResponse<Delivery>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling driverDeliveriesRead.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/driver/deliveries/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DeliveryFromJSON(jsonValue));
    }

    /**
     */
    async driverDeliveriesRead(id: string): Promise<Delivery> {
        const response = await this.driverDeliveriesReadRaw({ id: id });
        return await response.value();
    }

    /**
     */
    async driverDeliveriesUpdateRaw(requestParameters: DriverDeliveriesUpdateRequest): Promise<runtime.ApiResponse<Delivery>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling driverDeliveriesUpdate.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling driverDeliveriesUpdate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/driver/deliveries/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DeliveryToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DeliveryFromJSON(jsonValue));
    }

    /**
     */
    async driverDeliveriesUpdate(id: string, data: Delivery): Promise<Delivery> {
        const response = await this.driverDeliveriesUpdateRaw({ id: id, data: data });
        return await response.value();
    }

}
